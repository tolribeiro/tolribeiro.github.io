<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Thiago Ribeiro</title>
    <link type="application/atom+xml" rel="self" href="http://username.github.io//atom.xml"/>
  
  <link href="http://username.github.io//"/>
  <id>http://username.github.io//</id>
  <updated>2015-12-23T00:16:41Z</updated>
  <author>
    <name>Thiago Ribeiro</name>
    <email>tor@ecomp.poli.br</email>
  </author>
  <rights type="text">Copyright © 2015 Thiago Ribeiro. All rights reserved.</rights>
  
  <entry>
  <title type="text">Understanding Graph Coloring (vertex): a greedy approach (Part I)</title>
  <link rel="alternate" type="text/html" href="http://username.github.io//understanding-graph-coloring.html" />
  <id>http://username.github.io//understanding-graph-coloring</id>
  <published>2015-12-21T09:48:15Z</published>
  <updated>2015-12-21T09:48:15Z</updated>
  <content type="html"><![CDATA[ <p>It is known that the problem of coloring a graph with the smallest number of colors needed (finding its <em>chromatic number</em>), is part of the set of NP-Complete problems.</p>

<p>However, there are methods that can be used to color vertices sequentially, by choosing the colors based on the colors already assigned in the vertex’s neighborhood. In other words, we can use what is called a <em>greedy algorithm</em> to solve the problem.</p>

<p>To explore this approach, imagine that you have a palette with 3 colors available, and the following graph to color:</p>

<p><img src="./static/img/graph1.png" width="330" height="280" class="img-responsive center-block" /></p>

<p>Knowing that you cannot color vertices that are adjacent to each other with the same color, the step-by-step process to color the entire graph of Figure 1 is described below:</p>

<ol>
<li>Let&rsquo;s say we choose the first color <em>blue</em> (ordered from left to right), to color vertex 1;</li>
<li>Intuitively, we already know that vertices 2 and 3 cannot be colored by blue anymore, because they are adjacent to 1. Thus, following the order, for vertex 2 we choose the next available color and it is <em>red</em>;</li>
<li>The next vertex to color, 3, is also adjacent to 1 and 2, and by that we know that neither blue or red can be used to color it, so the next one available is <em>yellow</em>.</li>
<li>The last vertex, 4, is only adjacent to vertex 2. This tells us that the only color we cannot choose is <em>red</em>. Then going back to the first color available, vertex 4 is colored by <em>blue</em> (it could have been yellow).</li>
</ol>


<p><br /></p>

<p><img src="./static/img/graph-coloring.png" width="940" height="240" class="img-responsive center-block" /></p>

<p><br /></p>

<p>One of the applications that I like the most and where graph coloring can be applied is the frequency assignment in cellular networks. In order to avoid interference or crosstalk, different frequencies are assigned to different cells, and the total number of distinct frequencies should be minimized.</p>

<p>Therefore, if you instead of considering the colors blue, red and yellow, consider them as frequency 1, frenquency 2 and frequency 3, the algorithm that we manually applied to the graph above could have been very useful to configure a simple cellular network or any similar schema described as a graph.</p>

<p>In the next part we&rsquo;ll be going through a C++ implementation that generates code that can be compiled in LaTeX using Tikz, where we&rsquo;ll be able to see it working for generic graphs.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">My very fist iOS App: controlling work hours</title>
  <link rel="alternate" type="text/html" href="http://username.github.io//first-iOS-App.html" />
  <id>http://username.github.io//first-iOS-App</id>
  <published>2015-09-27T17:13:05Z</published>
  <updated>2015-09-27T17:13:05Z</updated>
  <content type="html"><![CDATA[ <p>In the month of May this year, I decided to dive into the world of mobile development. For that reason,  I accepted the challenge of joining a company specialized in a field where I would learn, practice daily, and immerse myself in the culture of developing applications that run in smartphones&ndash;specifically iPhones.</p>

<p>Consequently, in the initial days of my internship, I was told that I should fill out a spreadsheet (on paper, it couldn&rsquo;t be digital) stating: the arrival time, if I had stopped to eat during the day, and my time of departure.</p>

<p>Even though I had heard there was a spreadsheet set up that could do the job, I saw in that an opportunity to develop my skills in iOS&ndash;it was then that I began to create an app to do all the math for me. As a result, my only  task would be to log my work hours on the sheet at the end of the workday.</p>

<div style="text-align:center" markdown="1">
<!--![Message Signal](http://tolribeiro.github.io/mywebsite/downloads/minhasHorasNoData.jpg "First screen, to fill out with the times.")-->
<img src="./static/img/minhasHorasNoData.jpg" width="360" height="640" class="img-responsive center-block" />
</div>


<p><br />
In the empty forms, I manually enter the times (24-hour style in Brazil) during the day and press calculate to see how many hours I have worked until the break, the duration of my break, the hours I have worked after my break, and the total, as you can see below:
<br /></p>

<div style="text-align:center" markdown="1">
<img src="./static/img/minhasHorasData.jpg" width="360" height="640" class="img-responsive center-block"/>
<!--![Message Signal](http://tolribeiro.github.io/mywebsite/downloads/minhasHorasData.jpg "App showing the elapsed time calculated.")-->
</div>


<p><br />
As I kept researching about how to calculate elapsed time, I learned more about NSDate and NSTimeInterval, which I believe is a more appropriate way to implement such apps. Therefore, at the time, I designed the algorithm &ldquo;by hand&rdquo;, by getting the interval between the integers and returning the elapsed time.</p>

<p>After a couple of months, I considered a lot of other features that I could implement to make my app much more robust, such as: storing the data, enabling the user to use the current time from the phone to mark the time, and so on.</p>

<p>Despite not yet implementing these features in my app, the experience of starting something on my own for iOS as a first application, even with such a simple function, was very encouraging and continues to keep me excited about the world of mobile development.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Capacitor charging graph application</title>
  <link rel="alternate" type="text/html" href="http://username.github.io//capacitor-charging-graph-application.html" />
  <id>http://username.github.io//capacitor-charging-graph-application</id>
  <published>2015-05-04T19:04:00Z</published>
  <updated>2015-05-04T19:04:00Z</updated>
  <content type="html"><![CDATA[ <p>Recently, I faced the task of analyzing the graph of a capacitor in a simple circuit configuration: a voltage source powering the given capacitor connected to a resistor in series.</p>

<p>The result of this configuration is pretty straightforward: my capacitor will get charged with a certain value of voltage from the source (<em>almost</em> 100%), respecting the exponential function described below:</p>

<div style="text-align:center" markdown="1">
<!-- ![Message Signal](http://tolribeiro.github.io/mywebsite/downloads/charge.png "Function that describes capacitor charge.") -->
<img src="./static/img/charge.png" class="img-responsive center-block"/>
</div>


<p><br />
We can easily see that it corresponds to a <em>time</em> versus <em>voltage</em> (exponential) function, where the <em>RC</em> element is what we call <strong>time constant</strong>. If you multiply the value of your capacitance with the value of the resistance that you have configured in your circuit, the result will represent how long it took for your capacitor to get charged with approximately 63% of the voltage from the source.</p>

<p>As an example, let&rsquo;s suppose we have a 12V source powering a 1000uF capacitor connected to a 51k resistor: it would take 51 seconds for the capacitor to have stored approximately 7.5V between its terminals.</p>

<h1>Solving the problem: Javascript + Google API</h1>

<p>As I didn&rsquo;t have an oscilloscope, an analog port from a microcontroller board, nor any other resource that would help me to see the graph with the values of time and voltages plotted instantly, the first idea was to use the timer from my cellphone, marking laps and then after plotting the graph on another specific software.</p>

<p>Thus, I thought that it would be really nice to have an application where I could put it all together (timer, time constant calculation and plotted graph) in one single page. The hassle of switching between my phone and my circuit, having to write down the values of times, made me think of this solution that I called <strong>Cap-Charge</strong>.</p>

<h1>First version and demonstration video</h1>

<p>Although I think it would be better to work on all the single bugs and put the <em>almost</em> perfect solution, I decided to put online a very first version (0.1) so as other people use it, we can keep improving it together. I also recorded a video for those who are interested in using it and seeing how it works. (Link is <a href="http://tolribeiro.github.io/cap-charge/" target="_blank">here</a>).</p>

<p>Video link <a href="https://www.youtube.com/watch?v=3nwURuvDR7w" target="_blank">here</a>.</p>

<p>I&rsquo;ve also realized that the application can be very helpful to use in lab experiments in general, so I hope it optimizes your time whether you&rsquo;re doing it in school or at home. Please let me know if you have any questions. Have fun!</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Simplified DES (SDES): an implementation in C</title>
  <link rel="alternate" type="text/html" href="http://username.github.io//SDES-implementation-in-C.html" />
  <id>http://username.github.io//SDES-implementation-in-C</id>
  <published>2015-01-12T00:27:00Z</published>
  <updated>2015-01-12T00:27:00Z</updated>
  <content type="html"><![CDATA[ <p>A few months ago, I went through a quite challenging experience as a student of an introdutory class on Criptography: I was required to give a presentation on <strong>DES</strong> algorithm.</p>

<p>After going through the titles of the reliable books on the subject, I decided to read <em>Criptography and Network Security</em> by William Stallings and one of the first sentences on that page caught my attention:</p>

<blockquote><p>&ldquo;[&hellip;] the structure of DES and most symmetric ciphers is very complex and cannot be explained as easily [&hellip;]&rdquo;.</p></blockquote>

<p>Therefore, in the next paragraph, it said that studying a simplified version (SDES) would enhance the understanding of DES, and I can guarantee that it actually does.</p>

<p>After a couple of hours struggling in the beginning, I finally got the idea behind one of the most important symmetric ciphers algorithms.</p>

<h1>The encryption process</h1>

<p>The simplified DES operates on a 8-bit block of <em>plaintext</em> to generate a 8-bit block of <em>ciphertext</em>. These types of algorithms are called <strong>block ciphers</strong>. It also uses a 10-bit key, generating two subkeys in the process, used as input for the most delicate part of the algorithm, the <em>fk function</em>. <br></p>

<p>The scheme below shows how the plaintext (input) is manipulated to generate the ciphertext (output).</p>

<!-- <div style="text-align:center" markdown="1">  -->


<!-- ![Message Signal](http://tolribeiro.github.io/mywebsite/downloads/encryption.png "Simplified DES encryption scheme.") -->


<p style="text-align:center"><img src="./static/img/encryption.png" width="229" height="762" class="img-responsive center-block"/></p>




<!-- </div> -->


<p><br/>
After all these steps, the <em>output</em> is the encrypted <em>input</em>.</p>

<h1>The keys generation step</h1>

<p>This step only involves single permutations and shifts. I strongly believe that if you take a look at the implementation you won&rsquo;t have any problems understanding it.</p>

<h1>The decryption process</h1>

<p>DES is a <strong>symmetric cipher</strong>, which means that it uses the same key to <em>encrypt</em> and <em>decrypt</em> the data. Since my idea was only show the step-by-step encryption process, I decided not to write the function to decrypt it.</p>

<p>However, you might not have any problems doing it either, because the only thing you&rsquo;ll need to do is the encryption process backwards, i.e.: <em>output -> IP(output) -> fk(output, k2) -> SW(output) -> fk(output, k1) -> IP Inverse (output) -> input</em>.</p>

<h1>The implementation in C</h1>

<p>Based on the scheme shown above, I implemented the algorithm and came up with the <em>encrypt</em> function, that summarizes the encryption process of Simplified DES.</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// ------------------------------------------------</span>
<span class="c1">// ---            Encrypt Function             ---</span>
<span class="c1">// ------------------------------------------------</span>

<span class="kt">void</span> <span class="nf">encrypt</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">initial_permutation</span><span class="p">(</span><span class="n">input</span><span class="p">);</span> <span class="c1">// IP</span>
    <span class="n">fk</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">k1</span><span class="p">);</span> <span class="c1">// fk with subkey k1</span>
    <span class="n">switch_halves</span><span class="p">(</span><span class="n">output</span><span class="p">);</span>  <span class="c1">// SW</span>
    <span class="n">fk</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">k2</span><span class="p">);</span> <span class="c1">// fk with subkey k2</span>
    <span class="n">initial_permutation_inverse</span><span class="p">(</span><span class="n">output</span><span class="p">);</span> <span class="c1">// IP Inverse</span>
<span class="p">}</span></code></pre></div>


<p>To make it easier to understand, I tried to stick to the names of the variables. The variables <em>input</em>, <em>key</em> (also the subkeys <em>k1</em> and <em>k2</em>) and <em>output</em> literally mean the same as on the scheme.</p>

<p>You can download the full implementation <a href="http://tolribeiro.github.io/mywebsite/downloads/sdes.c" target="_blank">here</a> or from my <a href="http://github.com/tolribeiro/simplified-des" target="_blank">Github</a>.</p>

<h1>Final Considerations</h1>

<p>This algorithm was developed by Professor Edward Schaefer of Santa Clara University. I recommend that you read the appendix from <em>Criptography and Network Security</em>, explaining the algorithm in details (<a href="http://mercury.webster.edu/aleshunas/COSC%205130/G-SDES.pdf" target="_blank">here</a>).</p>

<p>Furthermore, take a look at this PDF document (<a href="http://ict.siit.tu.ac.th/~steven/css322y11s2/unprotected/CSS322Y11S2H01-DES-Examples.pdf" target="_blank">here</a>), written by Professor Steven Gordon of Sirindhorn International Institute of Technology, which contains some examples that you may want to verify with my implementation.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Digital Modulation: using PSK as example on MATLAB</title>
  <link rel="alternate" type="text/html" href="http://username.github.io//digital-modulation-PSK-matlab.html" />
  <id>http://username.github.io//digital-modulation-PSK-matlab</id>
  <published>2014-10-30T18:53:05Z</published>
  <updated>2014-10-30T18:53:05Z</updated>
  <content type="html"><![CDATA[ <p>This semester I had some exposure to digital modulation and learned some techniques applied to the studies of Communications Systems, which we&rsquo;ll put into practice by using the powerful software MATLAB.</p>

<p>For this tutorial, I&rsquo;ll pick up the <strong>PSK</strong> (Phase-Shift Keying). It uses shifts in phase of a signal to represent data. However, if you want and feel comfortable, you can also try it using <em>ASK</em>, <em>FSK</em> or <em>QAM</em>, that along with PSK, form the group of main types of digital modulation widely used in a variety of modern systems, such as cellular networks and so on.</p>

<p>First, let&rsquo;s suppose we have a message <em>m(t)</em>, which is a bit-stream signal, that we want to send through an analog channel. For this example, we consider the frequency of <em>m(t)</em> as <em>2 Hz</em>. Therefore, we have:</p>

<div class="highlight"><pre><code class="language-matlab" data-lang="matlab"><span class="n">f2</span> <span class="p">=</span> <span class="mi">2</span><span class="p">;</span>                           <span class="c">% m(t) frequency</span>
<span class="n">t</span> <span class="p">=</span> <span class="mi">0</span><span class="p">:.</span><span class="mi">001</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>            <span class="c">% time definition</span>
<span class="n">m</span> <span class="p">=</span> <span class="n">square</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nb">pi</span><span class="o">*</span><span class="n">f2</span><span class="o">*</span><span class="n">t</span><span class="p">);</span>          <span class="c">% message </span>
<span class="n">subplot</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
<span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>                     <span class="c">% plotting m(t)</span>
<span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;Time&#39;</span><span class="p">);</span>
<span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;Amplitude&#39;</span><span class="p">);</span>
<span class="n">title</span><span class="p">(</span><span class="s">&#39;Message Signal m(t)&#39;</span><span class="p">);</span>
<span class="n">grid</span> <span class="n">on</span><span class="p">;</span></code></pre></div>


<p>After running this, you should see this image, which represents the message we wanna send:</p>

<div style="text-align:center" markdown="1">
<!-- ![Message Signal](http://tolribeiro.github.io/mywebsite/downloads/message.png "Message Signal m(t)") -->
<img src="./static/img/message.png" class="img-responsive center-block"/>
</div>


<p>Now we can write the definition for the carrier <em>x(t)</em>, a <em>sin()</em> function with frequency of <em>10 Hz</em> and amplitude <em>A</em> of <em>5</em>.</p>

<div class="highlight"><pre><code class="language-matlab" data-lang="matlab"><span class="n">A</span> <span class="p">=</span> <span class="mi">5</span><span class="p">;</span>                        <span class="c">% amplitude</span>
<span class="n">f1</span> <span class="p">=</span> <span class="mi">10</span><span class="p">;</span>                      <span class="c">% frequency</span>
<span class="n">x</span> <span class="p">=</span> <span class="n">A</span><span class="o">.*</span><span class="nb">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nb">pi</span><span class="o">*</span><span class="n">f1</span><span class="o">*</span><span class="n">t</span><span class="p">);</span>        <span class="c">% carrier function</span>
<span class="n">subplot</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>                   <span class="c">% plotting x(t)</span>
<span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;Time&#39;</span><span class="p">);</span>
<span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;Amplitude&#39;</span><span class="p">);</span>
<span class="n">title</span><span class="p">(</span><span class="s">&#39;Carrier x(t)&#39;</span><span class="p">);</span>
<span class="n">grid</span> <span class="n">on</span><span class="p">;</span></code></pre></div>


<p>Now we can see the carrier <em>x(t)</em> we&rsquo;re gonna use to modulate our message <em>m(t)</em>:</p>

<div style="text-align:center" markdown="1">
<!-- ![Carrier Signal](http://tolribeiro.github.io/mywebsite/downloads/carrier.png "Carrier x(t)") -->
<img src="./static/img/carrier.png" class="img-responsive center-block"/>
</div>


<p>Finally, we can plot the modulated (in phase) signal <em>u(t)</em> by just multiplying <em>m(t)</em> by <em>x(t)</em>. We&rsquo;re gonna call <em>u(t)</em> the modulated signal.</p>

<div class="highlight"><pre><code class="language-matlab" data-lang="matlab"><span class="n">v</span> <span class="p">=</span> <span class="n">x</span><span class="o">.*</span><span class="n">u</span><span class="p">;</span>                      <span class="c">% Carrier multiplied by message</span>
<span class="n">subplot</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
<span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>                    <span class="c">% Plotting u(t), modulated signal</span>
<span class="n">xlabel</span><span class="p">(</span><span class="s">&#39;Time&#39;</span><span class="p">);</span>
<span class="n">ylabel</span><span class="p">(</span><span class="s">&#39;Amplitude&#39;</span><span class="p">);</span>
<span class="n">title</span><span class="p">(</span><span class="s">&#39;PSK Modulated Signal u(t)&#39;</span><span class="p">);</span>
<span class="n">grid</span> <span class="n">on</span><span class="p">;</span></code></pre></div>


<p>Which we can see as:</p>

<div style="text-align:center" markdown="1">
<!-- ![Modulated Signal](http://tolribeiro.github.io/mywebsite/downloads/modulated.png "PSK Modulated Signal u(t)") -->
<img src="./static/img/modulated.png" class="img-responsive center-block"/>
</div>


<p>Finally, our message is modulated in <strong>PSK</strong>, once the phase of the signal does not change while <em>m(t)</em> is equal to <em>1</em>, being reversed (changing by 180 degrees) when it goes to <em>0</em>.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Welcome to my website, powered by Jekyll</title>
  <link rel="alternate" type="text/html" href="http://username.github.io//first-post.html" />
  <id>http://username.github.io//first-post</id>
  <published>2014-09-21T18:53:05Z</published>
  <updated>2014-09-21T18:53:05Z</updated>
  <content type="html"><![CDATA[ <p>A couple of years ago, in my first years in college, I had a website just like this one where I would post some information about the creative process of a project that I was working on or even some stuff I thought it would be useful to other people.</p>

<h1>Migrating from Wordpress</h1>

<p>Although I was very used to the way Wordpress works, I always felt like it was too much for what I wanted. I needed something faster and straightforward that would help me to create and maintain content as easily as opening my favorite editor and typing my ideas, just like we do when we have that idea and we want to write it down. Fast. Well&hellip;I found out about <a href="http://jekyllrb.com/" target="_blank">Jekyll</a>. and that&rsquo;s exactly what I was looking for.</p>

<p>So now, I even feel like I should share more, write more&hellip;do more. Join me throughout the process and feel free to contact me. :)</p>
 ]]></content>
</entry>



</feed>
